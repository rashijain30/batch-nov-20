class MyCircularDeque {
    
    Node head = new Node();
    Node tail;
    int count=0;
    int size;
    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
        this.size = k;
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
        if(count==size)
            return false;
        Node node = new Node();
        node.value = value;
        if(tail==null){
            head.next = node;
            tail = node;
            tail.next=head;
        }else{
            Node next_node = head.next;
            head.next =node;
            node.next=next_node;
        }
        count++;
        return true;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
        if(count==size)
            return false;
        Node node =new Node();
        node.value = value;
        if(tail==null){
            head.next = node;
            tail=node;
        }else{
            tail.next= node;
            tail=node;
        }
        tail.next=head;
        count++;
        return true;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
        if(count==0)
            return false;
        Node node = head.next;
        if(count==1){
            tail=null;
            head.next=null;
        }else
            head.next=node.next;
        count--;
        return true;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
        if(count==0)
            return false;
        Node node = tail;
        if(count==1){
            tail=null;
            head.next=null;
        }else{
            Node n=head;
            while(n.next!=tail)
                n=n.next;
            tail=n;
            n.next=head;
        }
        count--;
        return true;
    }
    
    /** Get the front item from the deque. */
    public int getFront() {
        int front=-1;
        if(count>0)
            front = head.next.value;
        return front;
    }
    
    /** Get the last item from the deque. */
    public int getRear() {
        int rear=-1;
        if(count>0)
            rear = tail.value;
        return rear;
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        if(count==0)
            return true;
        return false;
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        if(count==size)
            return true;
        return false;
    }
    
    class Node{
        int value;
        Node next;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */